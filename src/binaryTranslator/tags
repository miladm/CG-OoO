!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADDR	global.h	/^typedef long long unsigned int ADDR;$/;"	t
ALU	global.h	/^typedef enum {noType, ALU, MEM, FPU, BR} type;$/;"	e	enum:__anon5
ALU_LATENCY	global.h	49;"	d
Append	list.h	/^    void Append (const Element &elem)$/;"	f	class:List
Assert	utility.h	39;"	d
BASICBLOCK	global.h	/^typedef enum {BASICBLOCK, SUPERBLOCK, PHRASEBLOCK} CLUSTER_MODE;$/;"	e	enum:__anon10
BR	global.h	/^typedef enum {noType, ALU, MEM, FPU, BR} type;$/;"	e	enum:__anon5
BR_DST	basicblock.h	/^typedef enum {BR_DST, NO_BR_DST} REACHING_TYPE;$/;"	e	enum:__anon1
BR_LATENCY	global.h	51;"	d
CFG_STRING_SIZE	global.h	21;"	d
CLUSTER_MODE	global.h	/^typedef enum {BASICBLOCK, SUPERBLOCK, PHRASEBLOCK} CLUSTER_MODE;$/;"	t	typeref:enum:__anon10
DEBUG_BB	global.h	37;"	d
DEBUG_INS	global.h	36;"	d
DEBUG_MAIN	global.h	35;"	d
DEBUG_PB	global.h	38;"	d
DEBUG_RA	global.h	39;"	d
FPU	global.h	/^typedef enum {noType, ALU, MEM, FPU, BR} type;$/;"	e	enum:__anon5
FPU_LATENCY	global.h	50;"	d
GLOBAL	global.h	/^typedef enum {GLOBAL, LOCAL_GLOBAL} REG_ALLOC_MODE;$/;"	e	enum:__anon7
GRF	global.h	/^typedef enum {LRF, GRF} regKind;$/;"	e	enum:__anon6
GRF_HI	global.h	71;"	d
GRF_LO	global.h	70;"	d
GRF_SIZE	global.h	64;"	d
INIT_RENAME_REG_NUM	global.h	46;"	d
INS_STRING_SIZE	global.h	22;"	d
INVALID_REG	global.h	81;"	d
InsertAt	list.h	/^    void InsertAt (const Element &elem, int index)$/;"	f	class:List
L1_LATENCY	global.h	52;"	d
L2_LATENCY	global.h	53;"	d
L3_LATENCY	global.h	54;"	d
LARGE_NUMBER	global.h	25;"	d
LENGTH	global.h	/^typedef long int LENGTH;$/;"	t
LIST_SCH	global.h	/^typedef enum {NO_LIST_SCH, LIST_SCH} SCH_MODE;$/;"	e	enum:__anon8
LOAD_STORE_ORDER	global.h	/^typedef enum {STORE_ORDER, LOAD_STORE_ORDER} MEM_SCH_MODE;$/;"	e	enum:__anon9
LOCAL_GLOBAL	global.h	/^typedef enum {GLOBAL, LOCAL_GLOBAL} REG_ALLOC_MODE;$/;"	e	enum:__anon7
LRF	global.h	/^typedef enum {LRF, GRF} regKind;$/;"	e	enum:__anon6
LRF_HI	global.h	68;"	d
LRF_LO	global.h	67;"	d
LRF_SIZE	global.h	63;"	d
Last	list.h	/^    Element Last () const$/;"	f	class:List
List	list.h	/^    List () {}$/;"	f	class:List
List	list.h	/^template<class Element> class List {$/;"	c
MEM	global.h	/^typedef enum {noType, ALU, MEM, FPU, BR} type;$/;"	e	enum:__anon5
MEM_HIGHERARCHY	global.h	57;"	d
MEM_LATENCY	global.h	56;"	d
MEM_READ	dependencyTable.h	/^typedef enum {MEM_READ, MEM_WRITE, REG_WRITE, REG_READ} tableType;$/;"	e	enum:__anon3
MEM_SCH_MODE	global.h	/^typedef enum {STORE_ORDER, LOAD_STORE_ORDER} MEM_SCH_MODE;$/;"	t	typeref:enum:__anon9
MEM_WRITE	dependencyTable.h	/^typedef enum {MEM_READ, MEM_WRITE, REG_WRITE, REG_READ} tableType;$/;"	e	enum:__anon3
NO_BR_DST	basicblock.h	/^typedef enum {BR_DST, NO_BR_DST} REACHING_TYPE;$/;"	e	enum:__anon1
NO_LIST_SCH	global.h	/^typedef enum {NO_LIST_SCH, LIST_SCH} SCH_MODE;$/;"	e	enum:__anon8
NUM_EU	global.h	60;"	d
NUM_REGISTERS	global.h	44;"	d
NUM_SPECIAL_REGISTERS	global.h	45;"	d
Nth	list.h	/^    Element Nth (int index) const$/;"	f	class:List
NumElements	list.h	/^    int NumElements () const$/;"	f	class:List
OFFSET_LARGER_THAN_X86_REG_CNT	global.h	26;"	d
OPCODE_STRING_SIZE	global.h	24;"	d
PHI_INS_ADDR	global.h	84;"	d
PHRASEBLOCK	global.h	/^typedef enum {BASICBLOCK, SUPERBLOCK, PHRASEBLOCK} CLUSTER_MODE;$/;"	e	enum:__anon10
PUSH_AT_BOTTOM	basicblock.h	/^typedef enum {PUSH_AT_BOTTOM, PUSH_ON_TOP} PUSH_LOCATION;$/;"	e	enum:__anon2
PUSH_LOCATION	basicblock.h	/^typedef enum {PUSH_AT_BOTTOM, PUSH_ON_TOP} PUSH_LOCATION;$/;"	t	typeref:enum:__anon2
PUSH_ON_TOP	basicblock.h	/^typedef enum {PUSH_AT_BOTTOM, PUSH_ON_TOP} PUSH_LOCATION;$/;"	e	enum:__anon2
REACHING_TYPE	basicblock.h	/^typedef enum {BR_DST, NO_BR_DST} REACHING_TYPE;$/;"	t	typeref:enum:__anon1
READ	global.h	/^typedef enum {none, READ, WRITE} memType;$/;"	e	enum:__anon4
REG_ALLOC_MODE	global.h	/^typedef enum {GLOBAL, LOCAL_GLOBAL} REG_ALLOC_MODE;$/;"	t	typeref:enum:__anon7
REG_READ	dependencyTable.h	/^typedef enum {MEM_READ, MEM_WRITE, REG_WRITE, REG_READ} tableType;$/;"	e	enum:__anon3
REG_STRING_SIZE	global.h	23;"	d
REG_WRITE	dependencyTable.h	/^typedef enum {MEM_READ, MEM_WRITE, REG_WRITE, REG_READ} tableType;$/;"	e	enum:__anon3
RF	regFile.h	/^		std::map<std::string,long int> RF; \/* REGISTER FILE *\/$/;"	m	class:regFile
RemoveAll	list.h	/^	void RemoveAll ()$/;"	f	class:List
RemoveAt	list.h	/^    void RemoveAt (int index)$/;"	f	class:List
SCH_MODE	global.h	/^typedef enum {NO_LIST_SCH, LIST_SCH} SCH_MODE;$/;"	t	typeref:enum:__anon8
SGRF_HI	global.h	74;"	d
SGRF_LO	global.h	73;"	d
SGRF_SIZE	global.h	65;"	d
SRF	regFile.h	/^		std::map<std::string,long int> SRF; \/* SPECIAL REGISTER FILE *\/$/;"	m	class:regFile
STORE_ORDER	global.h	/^typedef enum {STORE_ORDER, LOAD_STORE_ORDER} MEM_SCH_MODE;$/;"	e	enum:__anon9
ST_LATENCY	global.h	55;"	d
SUB_BLK_ID	global.h	/^typedef int SUB_BLK_ID;$/;"	t
SUPERBLOCK	global.h	/^typedef enum {BASICBLOCK, SUPERBLOCK, PHRASEBLOCK} CLUSTER_MODE;$/;"	e	enum:__anon10
SetParentAll	list.h	/^    void SetParentAll (Node *p)$/;"	f	class:List
UPLD_THRESHOLD	global.h	30;"	d
WBB_LOWER_BOUND	global.h	31;"	d
WBB_UPPER_BOUND	global.h	32;"	d
WRITE	global.h	/^typedef enum {none, READ, WRITE} memType;$/;"	e	enum:__anon4
X86_REG_HI	global.h	79;"	d
X86_REG_LO	global.h	78;"	d
X86_SPECIAL_REG_HI	global.h	77;"	d
X86_SPECIAL_REG_LO	global.h	76;"	d
_ANNOTATE_TRACE_H	annotateTrace.h	6;"	d
_BASICBLOCK_H	basicblock.h	6;"	d
_CONFIG_H	config.h	6;"	d
_DEP_SETUP_H_	dependencySetup.h	6;"	d
_DEP_TABLE_H_	dependencyTable.h	6;"	d
_DFS_H	dfs.h	6;"	d
_DOMINATOR_H_	dominator.h	6;"	d
_DOT_H	dot.h	6;"	d
_GLOBAL_H	global.h	5;"	d
_H_list	list.h	29;"	d
_H_utility	utility.h	8;"	d
_INSTRUCTION_H	instruction.h	8;"	d
_INTERF_NODE_H	interfNode.h	6;"	d
_LIST_SCHEDULE_H	listSchedule.h	6;"	d
_LOG_GEN_H	logGen.h	6;"	d
_LOOP_H	loop.h	6;"	d
_MAKE_BASICBLOCK_H	make_basicblock.h	6;"	d
_MAKE_INSTRUCTION_H	make_instruction.h	6;"	d
_MAKE_PHRASEBLOCK_H	make_phraseblock.h	6;"	d
_MAKE_SUBBLOCK_H	make_subblock.h	6;"	d
_MAKE_SUPERBLOCK_H	make_superblock.h	6;"	d
_PHRASEBLOCK_H	phraseblock.h	6;"	d
_PHRASE_H	phrase.h	6;"	d
_Q_SORT_	quickSort.h	6;"	d
_REGISTERZ_RENAME_H	registerRename.h	6;"	d
_REGISTER_ALLOCATE_H	registerAllocate.h	6;"	d
_REGISTER_ALLOCATE_SB_H	registerAllocate_sb.h	6;"	d
_RF_H	regFile.h	6;"	d
_SSA_H	ssa.h	6;"	d
_STATS_H	stats.h	6;"	d
_STAT_H	stat.h	6;"	d
_VARIABLE_H	variable.h	6;"	d
_ancestorBbList	basicblock.h	/^		List<basicblock*>* _ancestorBbList;$/;"	m	class:basicblock
_ancestorPbList	phraseblock.h	/^		List<phraseblock*> *_ancestorPbList;$/;"	m	class:phraseblock
_ancestorPhList	phrase.h	/^		List<phrase*> *_ancestorPhList;$/;"	m	class:phrase
_ancestors	instruction.h	/^		List<instruction*>* _ancestors;$/;"	m	class:instruction
_bBLists	phraseblock.h	/^		List<basicblock*> **_bBLists;$/;"	m	class:phraseblock
_bBlist	dot.h	/^		List<basicblock*>* _bBlist;$/;"	m	class:dot
_backEdgeDest	basicblock.h	/^		ADDR _backEdgeDest;$/;"	m	class:basicblock
_backEdgeSourceBbList	basicblock.h	/^		List<basicblock*>* _backEdgeSourceBbList;$/;"	m	class:basicblock
_bbDefSet	instruction.h	/^		std::set<long int> _bbDefSet;$/;"	m	class:instruction
_bbListForPhraseblock	basicblock.h	/^		List<ADDR>* _bbListForPhraseblock;$/;"	m	class:basicblock
_bbLocGlbRegSet	basicblock.h	/^		std::set<long int> _bbLocGlbRegSet;$/;"	m	class:basicblock
_bbUseSet	instruction.h	/^		std::set<long int> _bbUseSet;$/;"	m	class:instruction
_bpAccuracy	instruction.h	/^		double _bpAccuracy;$/;"	m	class:instruction
_brBias	instruction.h	/^		double _brBias;$/;"	m	class:instruction
_brHeaderAddr	basicblock.h	/^		ADDR _brHeaderAddr;$/;"	m	class:basicblock
_c	variable.h	/^		int _c; \/\/number of processed assignments to _var $/;"	m	class:variable
_childrenMap	basicblock.h	/^		std::map<ADDR, basicblock*> _childrenMap; \/\/BB's this immediately dominates$/;"	m	class:basicblock
_command	instruction.h	/^		char _command[INS_STRING_SIZE];$/;"	m	class:instruction
_defSet	basicblock.h	/^		std::set<long int> _defSet;$/;"	m	class:basicblock
_defSet	instruction.h	/^		std::set<long int> _defSet;$/;"	m	class:instruction
_dependents	instruction.h	/^		List<instruction*>* _dependents;$/;"	m	class:instruction
_descendantBbList	basicblock.h	/^		List<basicblock*>* _descendantBbList;$/;"	m	class:basicblock
_descendantPbList	phraseblock.h	/^		List<phraseblock*> *_descendantPbList;$/;"	m	class:phraseblock
_descendantPhList	phrase.h	/^		List<phrase*> *_descendantPhList;$/;"	m	class:phrase
_domSetIsAll	basicblock.h	/^		bool _domSetIsAll;$/;"	m	class:basicblock
_dominanceFrontier	basicblock.h	/^		std::map<ADDR, basicblock*> _dominanceFrontier; \/\/BB's this immediately dominates$/;"	m	class:basicblock
_dominatorMap	basicblock.h	/^		std::map<ADDR, basicblock*> _dominatorMap;$/;"	m	class:basicblock
_dominatorSet	basicblock.h	/^		std::set<ADDR> _dominatorSet;$/;"	m	class:basicblock
_edgeList_dynamic	interfNode.h	/^		List<interfNode*> *_edgeList_dynamic;$/;"	m	class:interfNode
_edgeList_static	interfNode.h	/^		List<interfNode*> *_edgeList_static; \/\/ Used for step 2 (graph coloring part)$/;"	m	class:interfNode
_entryPoint	basicblock.h	/^		bool _entryPoint;$/;"	m	class:basicblock
_fallThroughBB	basicblock.h	/^		basicblock* _fallThroughBB;$/;"	m	class:basicblock
_fallThroughBBList	loop.h	/^		List<basicblock*> *_fallThroughBBList;$/;"	m	class:loop
_fillColor	dot.h	/^		char* _fillColor;$/;"	m	class:dot
_fontColor	dot.h	/^		char* _fontColor;$/;"	m	class:dot
_hackPushCount	variable.h	/^		int _hackPushCount;$/;"	m	class:variable
_hasBrHeader	basicblock.h	/^		bool _hasBrHeader;$/;"	m	class:basicblock
_hasDst	instruction.h	/^		bool _hasDst;$/;"	m	class:instruction
_hasFallThru	instruction.h	/^		bool _hasFallThru;$/;"	m	class:instruction
_id	basicblock.h	/^        SUB_BLK_ID _id;$/;"	m	class:sub_block
_idomSet	basicblock.h	/^		std::set<ADDR> _idomSet;$/;"	m	class:basicblock
_inSet	basicblock.h	/^		std::set<long int> _inSet;$/;"	m	class:basicblock
_inSet	instruction.h	/^		std::set<long int> _inSet;$/;"	m	class:instruction
_innerLoops	loop.h	/^		List<loop*> *_innerLoops;$/;"	m	class:loop
_insAddr	instruction.h	/^		ADDR _insAddr;$/;"	m	class:instruction
_insAddrList	basicblock.h	/^		std::set<ADDR> _insAddrList;$/;"	m	class:basicblock
_insDst	instruction.h	/^		instruction* _insDst;$/;"	m	class:instruction
_insDstAddr	instruction.h	/^		ADDR _insDstAddr;$/;"	m	class:instruction
_insFallThru	instruction.h	/^		instruction* _insFallThru;$/;"	m	class:instruction
_insFallThruAddr	instruction.h	/^		ADDR _insFallThruAddr;$/;"	m	class:instruction
_insList	basicblock.h	/^		List<instruction*>* _insList;$/;"	m	class:basicblock
_insList	basicblock.h	/^        List<instruction*>* _insList;$/;"	m	class:sub_block
_insList	dot.h	/^		List<instruction*>* _insList;$/;"	m	class:dot
_insList	phrase.h	/^		List<instruction*> *_insList;$/;"	m	class:phrase
_insListSchList	basicblock.h	/^		List<instruction*>* _insListSchList;$/;"	m	class:basicblock
_insList_orig	basicblock.h	/^		List<instruction*>* _insList_orig;$/;"	m	class:basicblock
_insLocDefSet	instruction.h	/^		std::set<long int> _insLocDefSet;$/;"	m	class:instruction
_insMultiUseSet	instruction.h	/^		std::set<long int> _insMultiUseSet;$/;"	m	class:instruction
_insType	instruction.h	/^		char _insType;$/;"	m	class:instruction
_interiorBB	dot.h	/^        List<basicblock*>* _interiorBB;$/;"	m	class:dot
_label	dot.h	/^		char* _label;$/;"	m	class:dot
_latency	instruction.h	/^		int _latency;$/;"	m	class:instruction
_listIndx	basicblock.h	/^		int _listIndx;$/;"	m	class:basicblock
_localRegSet	basicblock.h	/^		std::set<long int> _localRegSet;$/;"	m	class:basicblock
_localRegSet	instruction.h	/^		std::set<long int> _localRegSet;$/;"	m	class:instruction
_longestPath	instruction.h	/^		int _longestPath;$/;"	m	class:instruction
_loop	loop.h	/^		List<basicblock*> *_loop;$/;"	m	class:loop
_loopEntryID	loop.h	/^		ADDR _loopEntryID;$/;"	m	class:loop
_loopExitID	loop.h	/^		ADDR _loopExitID;$/;"	m	class:loop
_memRdAddr	instruction.h	/^        set<ADDR> _memRdAddr;$/;"	m	class:instruction
_memRead	instruction.h	/^		bool _memRead;$/;"	m	class:instruction
_memSize	instruction.h	/^		int _memSize;$/;"	m	class:instruction
_memWrAddr	instruction.h	/^        set<ADDR> _memWrAddr;$/;"	m	class:instruction
_memWrite	instruction.h	/^		bool _memWrite;$/;"	m	class:instruction
_mem_sch_mode	instruction.h	/^        MEM_SCH_MODE _mem_sch_mode;$/;"	m	class:instruction
_missRate	instruction.h	/^		double _missRate;$/;"	m	class:instruction
_myBBs	instruction.h	/^		set<ADDR> _myBBs;$/;"	m	class:instruction
_neighborSet	interfNode.h	/^		set<long int> _neighborSet;$/;"	m	class:interfNode
_nodeCode	dot.h	/^		char* _nodeCode;$/;"	m	class:dot
_nodeName	dot.h	/^		char* _nodeName;$/;"	m	class:dot
_numPhraseblocks	phraseblock.h	/^		int _numPhraseblocks;$/;"	m	class:phraseblock
_opCode	instruction.h	/^		char _opCode[OPCODE_STRING_SIZE];$/;"	m	class:instruction
_ourerLoops	loop.h	/^		List<loop*> *_ourerLoops;$/;"	m	class:loop
_outDomTreeFile	dot.h	/^		FILE* _outDomTreeFile;$/;"	m	class:dot
_outFile	dot.h	/^		FILE* _outFile;$/;"	m	class:dot
_outSet	basicblock.h	/^		std::set<long int> _outSet;$/;"	m	class:basicblock
_outSet	instruction.h	/^		std::set<long int> _outSet;$/;"	m	class:instruction
_parentsMap	basicblock.h	/^		std::map<ADDR, basicblock*> _parentsMap;  \/\/BB's this is immediately domniated by$/;"	m	class:basicblock
_phList	basicblock.h	/^		List<phrase*> *_phList;$/;"	m	class:basicblock
_phiDestMap	basicblock.h	/^		std::map<long int, long int> _phiDestMap;$/;"	m	class:basicblock
_phiFuncMap	basicblock.h	/^		std::map<long int, vector<long int> > _phiFuncMap;$/;"	m	class:basicblock
_phraseBBLists	phraseblock.h	/^		List<basicblock*> *_phraseBBLists;$/;"	m	class:phraseblock
_psudoReg	interfNode.h	/^		long int _psudoReg;$/;"	m	class:interfNode
_r	instruction.h	/^        List<long int> *_r; \/\/SSA REGISTER LIST$/;"	m	class:instruction
_r_allocated	instruction.h	/^        List<long int> *_r_allocated; \/\/REGISTER LIST$/;"	m	class:instruction
_r_read	instruction.h	/^        List<long int> *_r_read; \/\/SSA REGISTER LIST$/;"	m	class:instruction
_r_write	instruction.h	/^        List<long int> *_r_write; \/\/SSA REGISTER LIST$/;"	m	class:instruction
_r_write_old	instruction.h	/^        List<long int> *_r_write_old; \/\/SSA REGISTER LIST (NOT RENAMED BY SSA)$/;"	m	class:instruction
_readVar	instruction.h	/^		map<int,int> _readVar;$/;"	m	class:instruction
_reg	interfNode.h	/^		long int _reg;$/;"	m	class:interfNode
_regAllocated	basicblock.h	/^        bool _regAllocated;$/;"	m	class:basicblock
_regAncestors	instruction.h	/^		List<instruction*>* _regAncestors;$/;"	m	class:instruction
_rk	instruction.h	/^		List<regKind> *_rk; \/\/REGISTER KIND (LRF=0 VS. GRF=1)$/;"	m	class:instruction
_rt	instruction.h	/^        List<int> *_rt; \/\/REGISTER TYPE LIST$/;"	m	class:instruction
_s	variable.h	/^		vector<long int> _s; \/\/the index for var_i is kept here$/;"	m	class:variable
_sDominatorMap	basicblock.h	/^		std::map<ADDR, basicblock*> _sDominatorMap;$/;"	m	class:basicblock
_sr	instruction.h	/^        List<long int> *_sr; \/\/SPECIAL REGISTER LIST$/;"	m	class:instruction
_srt	instruction.h	/^        List<int> *_srt; \/\/SPECIAL REGISTER TYPE LIST$/;"	m	class:instruction
_stats	basicblock.h	/^        block_stats _stats;$/;"	m	class:basicblock
_style	dot.h	/^		char* _style;$/;"	m	class:dot
_sub_blk_id	basicblock.h	/^        int _sub_blk_id;$/;"	m	class:basicblock
_takenTargetBB	basicblock.h	/^		basicblock* _takenTargetBB;$/;"	m	class:basicblock
_upld_dep	instruction.h	/^        bool _upld_dep;$/;"	m	class:instruction
_upld_ins	instruction.h	/^        bool _upld_ins;$/;"	m	class:instruction
_upld_roots	basicblock.h	/^        List<instruction*>* _upld_roots;$/;"	m	class:basicblock
_upld_roots	instruction.h	/^        set<ADDR> _upld_roots;$/;"	m	class:instruction
_upld_set	basicblock.h	/^        set<ADDR> _upld_set;$/;"	m	class:sub_block
_useSet	basicblock.h	/^		std::set<long int> _useSet;$/;"	m	class:basicblock
_useSet	instruction.h	/^		std::set<long int> _useSet;$/;"	m	class:instruction
_var	variable.h	/^		long int _var;$/;"	m	class:variable
_visited	basicblock.h	/^		bool _visited;$/;"	m	class:basicblock
_writeVar	instruction.h	/^		map<int,int> _writeVar;$/;"	m	class:instruction
basicblock	basicblock.h	/^class basicblock {$/;"	c
bbID	basicblock.h	/^		ADDR bbID;$/;"	m	class:basicblock
bbList	variable.h	/^		List<basicblock*>* bbList;$/;"	m	class:variable
block_stats	stats.h	/^struct block_stats {$/;"	s
branchList	dependencyTable.h	/^		List<instruction*>* branchList;$/;"	m	class:dependencyTable
dependencyTable	dependencyTable.h	/^class dependencyTable {$/;"	c
dot	dot.h	/^class dot {$/;"	c
elems	list.h	/^    vector<Element> elems;$/;"	m	class:List
fileName	dot.h	/^		string fileName;$/;"	m	class:dot
findElement	list.h	/^	int findElement (const Element &elem) const$/;"	f	class:List
getLiveVarSize	basicblock.h	/^		int getLiveVarSize () { return _inSet.size () + _defSet.size (); }$/;"	f	class:basicblock
getLiveVarSize	instruction.h	/^		int getLiveVarSize () { return _inSet.size ()+_defSet.size (); }$/;"	f	class:instruction
instruction	instruction.h	/^class instruction {$/;"	c
interfNode	interfNode.h	/^class interfNode {$/;"	c
length	stats.h	/^        int length;$/;"	m	struct:block_stats
loop	loop.h	/^class loop : public basicblock {$/;"	c
memReadList	dependencyTable.h	/^		std::map<ADDR,instruction*> memReadList;$/;"	m	class:dependencyTable
memType	global.h	/^typedef enum {none, READ, WRITE} memType;$/;"	t	typeref:enum:__anon4
memWriteList	dependencyTable.h	/^		std::map<ADDR,instruction*> memWriteList;$/;"	m	class:dependencyTable
memWrites	dependencyTable.h	/^		List<instruction*>* memWrites;$/;"	m	class:dependencyTable
noType	global.h	/^typedef enum {noType, ALU, MEM, FPU, BR} type;$/;"	e	enum:__anon5
none	global.h	/^typedef enum {none, READ, WRITE} memType;$/;"	e	enum:__anon4
phrase	phrase.h	/^class phrase {$/;"	c
phraseblock	phraseblock.h	/^class phraseblock : public basicblock {$/;"	c
readRegRenMap	instruction.h	/^	    map<long int,long int> readRegRenMap;$/;"	m	class:instruction
regFile	regFile.h	/^class regFile {$/;"	c
regKind	global.h	/^typedef enum {LRF, GRF} regKind;$/;"	t	typeref:enum:__anon6
regReadList	dependencyTable.h	/^		std::map<ADDR,instruction*> regReadList;$/;"	m	class:dependencyTable
regWriteList	dependencyTable.h	/^		std::map<ADDR,instruction*> regWriteList;$/;"	m	class:dependencyTable
sub_blk_map	basicblock.h	/^        map<SUB_BLK_ID, sub_block*> sub_blk_map;$/;"	m	class:basicblock
sub_block	basicblock.h	/^        sub_block () { _insList = new List<instruction*>; }$/;"	f	class:sub_block
sub_block	basicblock.h	/^class sub_block {$/;"	c
tableType	dependencyTable.h	/^typedef enum {MEM_READ, MEM_WRITE, REG_WRITE, REG_READ} tableType;$/;"	t	typeref:enum:__anon3
type	global.h	/^typedef enum {noType, ALU, MEM, FPU, BR} type;$/;"	t	typeref:enum:__anon5
upld_cnt	stats.h	/^        int upld_cnt;$/;"	m	struct:block_stats
upld_dep_cnt	stats.h	/^        int upld_dep_cnt;$/;"	m	struct:block_stats
upld_n_dep_cnt	stats.h	/^        int upld_n_dep_cnt;$/;"	m	struct:block_stats
variable	variable.h	/^class variable {$/;"	c
width	stats.h	/^        int width;$/;"	m	struct:block_stats
writeRegRenMap	instruction.h	/^		map<long int,long int> writeRegRenMap;$/;"	m	class:instruction
~regFile	regFile.h	/^		~regFile (){}$/;"	f	class:regFile
~sub_block	basicblock.h	/^        ~sub_block () { delete _insList; }$/;"	f	class:sub_block
