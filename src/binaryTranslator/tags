!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADDR	global.h	/^typedef unsigned long long int ADDR;$/;"	t
ALU	global.h	/^typedef enum {noType, ALU, MEM, FPU, BR} type;$/;"	e	enum:__anon3
ALU_LATENCY	global.h	36;"	d
Append	list.h	/^    void Append(const Element &elem)$/;"	f	class:List
Assert	utility.h	39;"	d
BR	global.h	/^typedef enum {noType, ALU, MEM, FPU, BR} type;$/;"	e	enum:__anon3
BR_LATENCY	global.h	38;"	d
CFG_STRING_SIZE	global.h	12;"	d
DEBUG_BB	global.h	25;"	d
DEBUG_INS	global.h	24;"	d
DEBUG_MAIN	global.h	23;"	d
DEBUG_PB	global.h	26;"	d
DEBUG_RA	global.h	27;"	d
DynBBSizeStat	stat.cpp	/^void DynBBSizeStat(map<int,int> &bbSizeHist, string *program_name) {$/;"	f
FPU	global.h	/^typedef enum {noType, ALU, MEM, FPU, BR} type;$/;"	e	enum:__anon3
FPU_LATENCY	global.h	37;"	d
GRF	global.h	/^typedef enum {LRF, GRF} regKind;$/;"	e	enum:__anon4
GRF_HI	global.h	55;"	d
GRF_LO	global.h	54;"	d
GRF_SIZE	global.h	50;"	d
INIT_RENAME_REG_NUM	global.h	33;"	d
INS_STRING_SIZE	global.h	13;"	d
INVALID_REG	global.h	60;"	d
InsertAt	list.h	/^    void InsertAt(const Element &elem, int index)$/;"	f	class:List
L1_LATENCY	global.h	39;"	d
L2_LATENCY	global.h	40;"	d
L3_LATENCY	global.h	41;"	d
LRF	global.h	/^typedef enum {LRF, GRF} regKind;$/;"	e	enum:__anon4
LRF_HI	global.h	53;"	d
LRF_LO	global.h	52;"	d
LRF_SIZE	global.h	49;"	d
List	list.h	/^    List() {}$/;"	f	class:List
List	list.h	/^template<class Element> class List {$/;"	c
MEM	global.h	/^typedef enum {noType, ALU, MEM, FPU, BR} type;$/;"	e	enum:__anon3
MEM_HIGHERARCHY	global.h	43;"	d
MEM_LATENCY	global.h	42;"	d
MEM_READ	dependencyTable.h	/^typedef enum {MEM_READ, MEM_WRITE, REG_WRITE, REG_READ} tableType;$/;"	e	enum:__anon1
MEM_WRITE	dependencyTable.h	/^typedef enum {MEM_READ, MEM_WRITE, REG_WRITE, REG_READ} tableType;$/;"	e	enum:__anon1
NUM_EU	global.h	46;"	d
NUM_REGISTERS	global.h	32;"	d
Nth	list.h	/^    Element Nth(int index) const$/;"	f	class:List
NumElements	list.h	/^    int NumElements() const$/;"	f	class:List
OPCODE_STRING_SIZE	global.h	15;"	d
PHI_INS_ADDR	global.h	63;"	d
PhraseblockToBB	phraseblock.cpp	/^void phraseblock::PhraseblockToBB (List<basicblock*>* bbList_new, loop* lp, ADDR* phID) {$/;"	f	class:phraseblock
READ	global.h	/^typedef enum {none, READ, WRITE} memType;$/;"	e	enum:__anon2
REG_READ	dependencyTable.h	/^typedef enum {MEM_READ, MEM_WRITE, REG_WRITE, REG_READ} tableType;$/;"	e	enum:__anon1
REG_STRING_SIZE	global.h	14;"	d
REG_WRITE	dependencyTable.h	/^typedef enum {MEM_READ, MEM_WRITE, REG_WRITE, REG_READ} tableType;$/;"	e	enum:__anon1
RF	regFile.h	/^		std::map<std::string,long int> RF;$/;"	m	class:regFile
RFstatus	regFile.h	/^		int RFstatus[NUM_REGISTERS];$/;"	m	class:regFile
RemoveAll	list.h	/^	void RemoveAll()$/;"	f	class:List
RemoveAt	list.h	/^    void RemoveAt(int index)$/;"	f	class:List
SetParentAll	list.h	/^    void SetParentAll(Node *p)$/;"	f	class:List
StatBBSizeStat	stat.cpp	/^void StatBBSizeStat(List<basicblock*> *bbList, string *program_name) {$/;"	f
StatNum_interBB_and_intra_BB_regs	stat.cpp	/^void StatNum_interBB_and_intra_BB_regs(List<basicblock*> *bbList, string *program_name) {$/;"	f
UPLD_THRESHOLD	global.h	18;"	d
WBB_LOWER_BOUND	global.h	19;"	d
WBB_UPPER_BOUND	global.h	20;"	d
WRITE	global.h	/^typedef enum {none, READ, WRITE} memType;$/;"	e	enum:__anon2
X86_REG_HI	global.h	58;"	d
X86_REG_LO	global.h	57;"	d
ZERO_ITER	ssa.cpp	7;"	d	file:
_ANNOTATE_TRACE_H	annotateTrace.h	6;"	d
_BASICBLOCK_H	basicblock.h	6;"	d
_CONFIG_H	config.h	6;"	d
_DEP_TABLE_H_	dependencyTable.h	6;"	d
_DFS_H	dfs.h	6;"	d
_DOMINATOR_H_	dominator.h	6;"	d
_DOT_H	dot.h	6;"	d
_GLOBAL_H	global.h	5;"	d
_H_list	list.h	29;"	d
_H_utility	utility.h	8;"	d
_INSTRUCTION_H	instruction.h	8;"	d
_INTERF_NODE_H	interfNode.h	6;"	d
_LIST_SCHEDULE_H	listSchedule.h	6;"	d
_LOG_GEN_H	logGen.h	6;"	d
_LOOP_H	loop.h	6;"	d
_MAKE_BASICBLOCK_H	make_basicblock.h	6;"	d
_MAKE_INSTRUCTION_H	make_instruction.h	6;"	d
_MAKE_PHRASEBLOCK_H	make_phraseblock.h	6;"	d
_PHRASEBLOCK_H	phraseblock.h	6;"	d
_PHRASE_H	phrase.h	6;"	d
_Q_SORT_	quickSort.h	6;"	d
_REGISTERZ_RENAME_H	registerRename.h	6;"	d
_REGISTER_ALLOCATE_H	registerAllocate.h	6;"	d
_RF_H	regFile.h	6;"	d
_SSA_H	ssa.h	6;"	d
_STAT_H	stat.h	6;"	d
_VARIABLE_H	variable.h	6;"	d
_ancestorBbList	basicblock.h	/^		List<basicblock*>* _ancestorBbList;$/;"	m	class:basicblock
_ancestorPbList	phraseblock.h	/^		List<phraseblock*> *_ancestorPbList;$/;"	m	class:phraseblock
_ancestorPhList	phrase.h	/^		List<phrase*> *_ancestorPhList;$/;"	m	class:phrase
_ancestors	instruction.h	/^		List<instruction*>* _ancestors;$/;"	m	class:instruction
_bBLists	phraseblock.h	/^		List<basicblock*> **_bBLists;$/;"	m	class:phraseblock
_bBlist	dot.h	/^		List<basicblock*>* _bBlist;$/;"	m	class:dot
_backEdgeDest	basicblock.h	/^		ADDR _backEdgeDest;$/;"	m	class:basicblock
_backEdgeSourceBbList	basicblock.h	/^		List<basicblock*>* _backEdgeSourceBbList;$/;"	m	class:basicblock
_bbListForPhraseblock	basicblock.h	/^		List<ADDR>* _bbListForPhraseblock;$/;"	m	class:basicblock
_bpAccuracy	instruction.h	/^		double _bpAccuracy;$/;"	m	class:instruction
_brBias	instruction.h	/^		double _brBias;$/;"	m	class:instruction
_brDst	instruction.h	/^		ADDR _brDst;$/;"	m	class:instruction
_c	variable.h	/^		int _c; \/\/number of processed assignments to _var $/;"	m	class:variable
_childrenMap	basicblock.h	/^		std::map<ADDR, basicblock*> _childrenMap; \/\/BB's this immediately dominates$/;"	m	class:basicblock
_command	instruction.h	/^		char _command[INS_STRING_SIZE];$/;"	m	class:instruction
_defSet	basicblock.h	/^		std::set<long int> _defSet;$/;"	m	class:basicblock
_dependents	instruction.h	/^		List<instruction*>* _dependents;$/;"	m	class:instruction
_descendantBbList	basicblock.h	/^		List<basicblock*>* _descendantBbList;$/;"	m	class:basicblock
_descendantPbList	phraseblock.h	/^		List<phraseblock*> *_descendantPbList;$/;"	m	class:phraseblock
_descendantPhList	phrase.h	/^		List<phrase*> *_descendantPhList;$/;"	m	class:phrase
_domSetIsAll	basicblock.h	/^		bool _domSetIsAll;$/;"	m	class:basicblock
_dominanceFrontier	basicblock.h	/^		std::map<ADDR, basicblock*> _dominanceFrontier; \/\/BB's this immediately dominates$/;"	m	class:basicblock
_dominatorMap	basicblock.h	/^		std::map<ADDR, basicblock*> _dominatorMap;$/;"	m	class:basicblock
_dominatorSet	basicblock.h	/^		std::set<ADDR> _dominatorSet;$/;"	m	class:basicblock
_edgeList_dynamic	interfNode.h	/^		List<interfNode*> *_edgeList_dynamic;$/;"	m	class:interfNode
_edgeList_static	interfNode.h	/^		List<interfNode*> *_edgeList_static; \/\/ Used for step 2 (graph coloring part)$/;"	m	class:interfNode
_entryPoint	basicblock.h	/^		bool _entryPoint;$/;"	m	class:basicblock
_fallThroughBB	basicblock.h	/^		basicblock* _fallThroughBB;$/;"	m	class:basicblock
_fallThroughBBList	loop.h	/^		List<basicblock*> *_fallThroughBBList;$/;"	m	class:loop
_fillColor	dot.h	/^		char* _fillColor;$/;"	m	class:dot
_fontColor	dot.h	/^		char* _fontColor;$/;"	m	class:dot
_hackPushCount	variable.h	/^		int _hackPushCount;$/;"	m	class:variable
_idomSet	basicblock.h	/^		std::set<ADDR> _idomSet;$/;"	m	class:basicblock
_inSet	basicblock.h	/^		std::set<long int> _inSet;$/;"	m	class:basicblock
_innerLoops	loop.h	/^		List<loop*> *_innerLoops;$/;"	m	class:loop
_insAddr	instruction.h	/^		ADDR _insAddr;$/;"	m	class:instruction
_insAddrList	basicblock.h	/^		std::set<ADDR> _insAddrList;$/;"	m	class:basicblock
_insList	basicblock.h	/^		List<instruction*>* _insList;$/;"	m	class:basicblock
_insList	dot.h	/^		List<instruction*>* _insList;$/;"	m	class:dot
_insList	phrase.h	/^		List<instruction*> *_insList;$/;"	m	class:phrase
_insListSchList	basicblock.h	/^		List<instruction*>* _insListSchList;$/;"	m	class:basicblock
_insType	instruction.h	/^		char _insType;$/;"	m	class:instruction
_label	dot.h	/^		char* _label;$/;"	m	class:dot
_latency	instruction.h	/^		int _latency;$/;"	m	class:instruction
_listIndx	basicblock.h	/^		int _listIndx;$/;"	m	class:basicblock
_localRegSet	basicblock.h	/^		std::set<long int> _localRegSet;$/;"	m	class:basicblock
_longestPath	instruction.h	/^		int _longestPath;$/;"	m	class:instruction
_loop	loop.h	/^		List<basicblock*> *_loop;$/;"	m	class:loop
_loopEntryID	loop.h	/^		ADDR _loopEntryID;$/;"	m	class:loop
_loopExitID	loop.h	/^		ADDR _loopExitID;$/;"	m	class:loop
_memRdAddr	instruction.h	/^        set<ADDR> _memRdAddr;$/;"	m	class:instruction
_memRead	instruction.h	/^		bool _memRead;$/;"	m	class:instruction
_memSize	instruction.h	/^		int _memSize;$/;"	m	class:instruction
_memWrAddr	instruction.h	/^        set<ADDR> _memWrAddr;$/;"	m	class:instruction
_memWrite	instruction.h	/^		bool _memWrite;$/;"	m	class:instruction
_missRate	instruction.h	/^		double _missRate;$/;"	m	class:instruction
_myBBs	instruction.h	/^		set<ADDR> _myBBs;$/;"	m	class:instruction
_neighborSet	interfNode.h	/^		set<long int> _neighborSet;$/;"	m	class:interfNode
_nodeCode	dot.h	/^		char* _nodeCode;$/;"	m	class:dot
_nodeName	dot.h	/^		char* _nodeName;$/;"	m	class:dot
_numPhraseblocks	phraseblock.h	/^		int _numPhraseblocks;$/;"	m	class:phraseblock
_opCode	instruction.h	/^		char _opCode[OPCODE_STRING_SIZE];$/;"	m	class:instruction
_ourerLoops	loop.h	/^		List<loop*> *_ourerLoops;$/;"	m	class:loop
_outFile	dot.h	/^		FILE* _outFile;$/;"	m	class:dot
_outSet	basicblock.h	/^		std::set<long int> _outSet;$/;"	m	class:basicblock
_parentsMap	basicblock.h	/^		std::map<ADDR, basicblock*> _parentsMap;  \/\/BB's this is immediately domniated by$/;"	m	class:basicblock
_phList	basicblock.h	/^		List<phrase*> *_phList;$/;"	m	class:basicblock
_phiDestMap	basicblock.h	/^		std::map<long int, long int> _phiDestMap;$/;"	m	class:basicblock
_phiFuncMap	basicblock.h	/^		std::map<long int, vector<long int> > _phiFuncMap;$/;"	m	class:basicblock
_phraseBBLists	phraseblock.h	/^		List<basicblock*> *_phraseBBLists;$/;"	m	class:phraseblock
_psudoReg	interfNode.h	/^		long int _psudoReg;$/;"	m	class:interfNode
_r	instruction.h	/^        List<long int> *_r;  \/\/SSA Register List$/;"	m	class:instruction
_r_allocated	instruction.h	/^        List<long int> *_r_allocated;  \/\/Register List$/;"	m	class:instruction
_r_read	instruction.h	/^        List<long int> *_r_read;  \/\/SSA Register List$/;"	m	class:instruction
_r_write	instruction.h	/^        List<long int> *_r_write;  \/\/SSA Register List$/;"	m	class:instruction
_r_write_old	instruction.h	/^        List<long int> *_r_write_old;  \/\/SSA Register List (not renamed by SSA)$/;"	m	class:instruction
_readVar	instruction.h	/^		map<int,int> _readVar;$/;"	m	class:instruction
_reg	interfNode.h	/^		long int _reg;$/;"	m	class:interfNode
_regAncestors	instruction.h	/^		List<instruction*>* _regAncestors;$/;"	m	class:instruction
_rk	instruction.h	/^		List<regKind> *_rk; \/\/Register Kind (LRF=0 vs. GRF=1)$/;"	m	class:instruction
_rt	instruction.h	/^        List<int> *_rt; \/\/Register Type List$/;"	m	class:instruction
_s	variable.h	/^		vector<long int> _s; \/\/the index for var_i is kept here$/;"	m	class:variable
_sDominatorMap	basicblock.h	/^		std::map<ADDR, basicblock*> _sDominatorMap;$/;"	m	class:basicblock
_style	dot.h	/^		char* _style;$/;"	m	class:dot
_takenTargetBB	basicblock.h	/^		basicblock* _takenTargetBB;$/;"	m	class:basicblock
_useSet	basicblock.h	/^		std::set<long int> _useSet;$/;"	m	class:basicblock
_var	variable.h	/^		long int _var;$/;"	m	class:variable
_visited	basicblock.h	/^		bool _visited;$/;"	m	class:basicblock
_writeVar	instruction.h	/^		map<int,int> _writeVar;$/;"	m	class:instruction
addAddr	dependencyTable.cpp	/^void dependencyTable::addAddr (long int addr, instruction* ins, tableType table) {$/;"	f	class:dependencyTable
addBB	loop.cpp	/^void loop::addBB (basicblock* bb) {$/;"	f	class:loop
addBB	variable.cpp	/^void variable::addBB(basicblock* bb) {$/;"	f	class:variable
addBBtoPBList	basicblock.cpp	/^void basicblock::addBBtoPBList(ADDR bbID) {$/;"	f	class:basicblock
addBr	dependencyTable.cpp	/^void dependencyTable::addBr  (instruction* ins) {$/;"	f	class:dependencyTable
addChild	basicblock.cpp	/^void basicblock::addChild(basicblock *child) {$/;"	f	class:basicblock
addEdge	interfNode.cpp	/^void interfNode::addEdge(interfNode* node) {$/;"	f	class:interfNode
addIns	basicblock.cpp	/^void basicblock::addIns(instruction* ins) {$/;"	f	class:basicblock
addIns	basicblock.cpp	/^void basicblock::addIns(instruction* ins, ADDR ID) {$/;"	f	class:basicblock
addIns	phrase.cpp	/^void phrase::addIns(instruction* ins) {$/;"	f	class:phrase
addReg	dependencyTable.cpp	/^void dependencyTable::addReg  (int indx, long int reg, instruction* ins, tableType table) {$/;"	f	class:dependencyTable
addToBB_ListSchedule	basicblock.cpp	/^void basicblock::addToBB_ListSchedule(instruction* ins) {$/;"	f	class:basicblock
addToDFset	basicblock.cpp	/^void basicblock::addToDFset(basicblock *node) {$/;"	f	class:basicblock
addToRegFile	regFile.cpp	/^int  regFile::addToRegFile(long int reg) {$/;"	f	class:regFile
addWr	dependencyTable.cpp	/^void dependencyTable::addWr  (instruction* ins) {$/;"	f	class:dependencyTable
addrLookup	dependencyTable.cpp	/^instruction* dependencyTable::addrLookup (long int addr, tableType table) {$/;"	f	class:dependencyTable
allocate_register	registerAllocate.cpp	/^void allocate_register(List<basicblock*> *bbList, List<instruction*> *insList) {$/;"	f
allocatedRegister	instruction.cpp	/^void instruction::allocatedRegister(long int r_allocated, regKind rk) {$/;"	f	class:instruction
annotateTrace_forBB	annotateTrace.cpp	/^void annotateTrace_forBB (List<basicblock*>* bbList, map<ADDR,instruction*> *insAddrMap, string *program_name) {$/;"	f
annotateTrace_forPB	annotateTrace.cpp	/^void annotateTrace_forPB (List<basicblock*>* pbList, map<ADDR,instruction*> *insAddrMap, string *program_name) {$/;"	f
assignReg	interfNode.cpp	/^void interfNode::assignReg(set<long int> &RFset) {$/;"	f	class:interfNode
assign_global_registers	registerAllocate.cpp	/^void assign_global_registers(map<long int,interfNode*> &locallIntfNodeMap, map<long int,interfNode*> &globalIntfNodeMap, map<long int,interfNode*> &allIntfNodeMap) {$/;"	f
assign_local_registers	registerAllocate.cpp	/^void assign_local_registers(map<long int,interfNode*> &locallIntfNodeMap, map<long int,interfNode*> &allIntfNodeMap) {$/;"	f
basicblock	basicblock.cpp	/^basicblock::basicblock() {$/;"	f	class:basicblock
basicblock	basicblock.h	/^class basicblock {$/;"	c
basicblockToPhrase	basicblock.cpp	/^void basicblock::basicblockToPhrase() {$/;"	f	class:basicblock
bbID	basicblock.h	/^		ADDR bbID;$/;"	m	class:basicblock
bbList	variable.h	/^		List<basicblock*>* bbList;$/;"	m	class:variable
brLookup	dependencyTable.cpp	/^List<instruction*>* dependencyTable::brLookup () {$/;"	f	class:dependencyTable
branchList	dependencyTable.h	/^		List<instruction*>* branchList;$/;"	m	class:dependencyTable
buildDefUseSets	ssa.cpp	/^void buildDefUseSets(List<basicblock*> *bbList) {$/;"	f
buildDomTree	basicblock.cpp	/^void basicblock::buildDomTree() {$/;"	f	class:basicblock
buildImmediateDominators	basicblock.cpp	/^void basicblock::buildImmediateDominators() {$/;"	f	class:basicblock
buildSDominators	basicblock.cpp	/^void basicblock::buildSDominators() {$/;"	f	class:basicblock
buildVarList	ssa.cpp	/^void buildVarList (List<basicblock*>* bbList, map<int,variable*> &varList) {$/;"	f
build_dominance_frontier	dominator.cpp	/^void build_dominance_frontier (List<basicblock*>* bbList) {$/;"	f
build_dominator_tree	dominator.cpp	/^void build_dominator_tree(List<basicblock*>* bbList) {$/;"	f
build_dominators	dominator.cpp	/^void build_dominators(List<basicblock*>* bbList) {$/;"	f
build_idom	dominator.cpp	/^void build_idom(List<basicblock*>* bbList) {$/;"	f
build_ssa_form	ssa.cpp	/^void build_ssa_form(List<basicblock*> *bbList, map<int,variable*> &varList) {$/;"	f
build_strict_dominators	dominator.cpp	/^void build_strict_dominators(List<basicblock*>* bbList) {$/;"	f
closeBlock	dot.cpp	/^void dot::closeBlock() {$/;"	f	class:dot
counter	ssa.cpp	/^int counter = 0; \/\/TODO for debug$/;"	v
createGraph	dot.cpp	/^void dot::createGraph() {$/;"	f	class:dot
createSubGraph	dot.cpp	/^void dot::createSubGraph(int subGraphID) {$/;"	f	class:dot
defn	dot.cpp	/^void dot::defn() {$/;"	f	class:dot
delAddr	dependencyTable.cpp	/^void dependencyTable::delAddr (long int addr, instruction* ins, tableType table) {$/;"	f	class:dependencyTable
delBr	dependencyTable.cpp	/^void dependencyTable::delBr  (instruction* ins){$/;"	f	class:dependencyTable
delReg	dependencyTable.cpp	/^void dependencyTable::delReg  (long int reg, instruction* ins, tableType table){$/;"	f	class:dependencyTable
delWr	dependencyTable.cpp	/^void dependencyTable::delWr  (instruction* ins){$/;"	f	class:dependencyTable
dependencyTable	dependencyTable.cpp	/^dependencyTable::dependencyTable() {$/;"	f	class:dependencyTable
dependencyTable	dependencyTable.h	/^class dependencyTable {$/;"	c
dependencyTableCheck	instruction.cpp	/^void instruction::dependencyTableCheck (dependencyTable *depTables) {$/;"	f	class:instruction
dfs	dfs.cpp	/^void dfs(List<basicblock*>* bbList, ADDR bbID_seed) {$/;"	f
dot	dot.cpp	/^dot::dot(int mode, string *program_name) {$/;"	f	class:dot
dot	dot.h	/^class dot {$/;"	c
dumpBB	annotateTrace.cpp	/^void dumpBB (List<basicblock*>* bbList, List<instruction*>* insList, map<ADDR, basicblock*> &bbHeaders) {$/;"	f
elems	list.h	/^    deque<Element> elems;$/;"	m	class:List
elimPhiFuncs	basicblock.cpp	/^int basicblock::elimPhiFuncs() {$/;"	f	class:basicblock
eliminatePhiFuncs	registerAllocate.cpp	/^int eliminatePhiFuncs(List<basicblock*> *bbList) {$/;"	f
fileName	dot.h	/^		string fileName;$/;"	m	class:dot
findBB	annotateTrace.cpp	/^long int findBB(ADDR bbHead, List<map<ADDR,string> > *dynBBList) {$/;"	f
findBB	dfs.cpp	/^basicblock* findBB(List<basicblock*>* bbList, ADDR addr) {$/;"	f
findDomEntryPoints	ssa.cpp	/^void findDomEntryPoints(List<basicblock*> *bbList, List<basicblock*> *interiorBB) {$/;"	f
findDomTreeBottomSet	dominator.cpp	/^void findDomTreeBottomSet (List<basicblock*>* bbList, map<ADDR, basicblock*> &domTree_Bottoms) {$/;"	f
findElement	list.h	/^	int findElement(const Element &elem) const$/;"	f	class:List
findEntryPoints	registerAllocate.cpp	/^void findEntryPoints(List<basicblock*> *bbList, List<basicblock*> *interiorBB) {$/;"	f
findFallThroughBBs	loop.cpp	/^void loop::findFallThroughBBs() {$/;"	f	class:loop
findLongestPath	listSchedule.cpp	/^int findLongestPath(instruction* ins, basicblock* bb) {$/;"	f
findLoop	make_phraseblock.cpp	/^void findLoop(basicblock* bb, loop* lp, map<ADDR,basicblock*> &domList, ADDR startLoopID, ADDR endLoopID) {$/;"	f
findPath	dfs.cpp	/^void findPath(basicblock* bb, ADDR loopEntryID) {$/;"	f
finish	dot.cpp	/^void dot::finish() {$/;"	f	class:dot
finish	main.cpp	/^void finish (List<basicblock*> *bbList, List<basicblock*> *phBBList, std::string *program_name) {$/;"	f
finishBox	dot.cpp	/^void dot::finishBox() {$/;"	f	class:dot
getAllasDominators	basicblock.cpp	/^bool basicblock::getAllasDominators() {$/;"	f	class:basicblock
getAncestorList	basicblock.cpp	/^List<basicblock*>* basicblock::getAncestorList() {$/;"	f	class:basicblock
getAncestors	instruction.cpp	/^List<instruction*>* instruction::getAncestors() {$/;"	f	class:instruction
getArchRegisterStr	instruction.cpp	/^std::string instruction::getArchRegisterStr() {$/;"	f	class:instruction
getBBListForPB	basicblock.cpp	/^List<ADDR>* basicblock::getBBListForPB() {$/;"	f	class:basicblock
getBPaccuracy	instruction.cpp	/^double instruction::getBPaccuracy() {$/;"	f	class:instruction
getBackEdgeDest	basicblock.cpp	/^ADDR basicblock::getBackEdgeDest() {$/;"	f	class:basicblock
getBackEdgeSourceList	basicblock.cpp	/^List<basicblock*>* basicblock::getBackEdgeSourceList() {$/;"	f	class:basicblock
getBbSize	basicblock.cpp	/^int basicblock::getBbSize() {$/;"	f	class:basicblock
getBrDst	instruction.cpp	/^ADDR instruction::getBrDst() {$/;"	f	class:instruction
getBrTakenBias	instruction.cpp	/^double instruction::getBrTakenBias() {$/;"	f	class:instruction
getC	variable.cpp	/^int variable::getC() {$/;"	f	class:variable
getChildren	basicblock.cpp	/^map<ADDR,basicblock*> basicblock::getChildren() {$/;"	f	class:basicblock
getChildrenSize	basicblock.cpp	/^int basicblock::getChildrenSize() {$/;"	f	class:basicblock
getDF	basicblock.cpp	/^map<ADDR,basicblock*> basicblock::getDF() {$/;"	f	class:basicblock
getDefSet	basicblock.cpp	/^set<long int> basicblock::getDefSet() {$/;"	f	class:basicblock
getDependents	instruction.cpp	/^List<instruction*>* instruction::getDependents() {$/;"	f	class:instruction
getDescendentList	basicblock.cpp	/^List<basicblock*>* basicblock::getDescendentList() {$/;"	f	class:basicblock
getDominators	basicblock.cpp	/^map<ADDR,basicblock*>  basicblock::getDominators() {$/;"	f	class:basicblock
getEdgeList	interfNode.cpp	/^List<interfNode*>* interfNode::getEdgeList() {$/;"	f	class:interfNode
getFallThrough	basicblock.cpp	/^basicblock* basicblock::getFallThrough() {$/;"	f	class:basicblock
getFallThroughBBs	loop.cpp	/^List<basicblock*>* loop::getFallThroughBBs() {$/;"	f	class:loop
getID	basicblock.cpp	/^ADDR basicblock::getID() {$/;"	f	class:basicblock
getID	variable.cpp	/^long int variable::getID() {$/;"	f	class:variable
getInSet	basicblock.cpp	/^set<long int> basicblock::getInSet() {$/;"	f	class:basicblock
getInsAddr	instruction.cpp	/^ADDR instruction::getInsAddr() {$/;"	f	class:instruction
getInsAsm	instruction.cpp	/^const char *instruction::getInsAsm() {return _command;}$/;"	f	class:instruction
getInsList	basicblock.cpp	/^List<instruction*>* basicblock::getInsList() {$/;"	f	class:basicblock
getInsList_ListSchedule	basicblock.cpp	/^List<instruction*>* basicblock::getInsList_ListSchedule() {$/;"	f	class:basicblock
getLastIns	basicblock.cpp	/^instruction* basicblock::getLastIns() {$/;"	f	class:basicblock
getLastInsDst	basicblock.cpp	/^ADDR basicblock::getLastInsDst() {$/;"	f	class:basicblock
getLatency	instruction.cpp	/^int instruction::getLatency() {$/;"	f	class:instruction
getLdMissRate	instruction.cpp	/^double instruction::getLdMissRate() {$/;"	f	class:instruction
getListIndx	basicblock.cpp	/^int basicblock::getListIndx() {$/;"	f	class:basicblock
getLiveVarSize	basicblock.h	/^		int getLiveVarSize() {$/;"	f	class:basicblock
getLocalRegSet	basicblock.cpp	/^set<long int> basicblock::getLocalRegSet() {$/;"	f	class:basicblock
getLongestPath	instruction.cpp	/^int instruction::getLongestPath() {$/;"	f	class:instruction
getLoop	loop.cpp	/^List<basicblock*>* loop::getLoop() {$/;"	f	class:loop
getLoopEntry	loop.cpp	/^basicblock* loop::getLoopEntry() {$/;"	f	class:loop
getLoopEntryID	loop.cpp	/^ADDR loop::getLoopEntryID() {$/;"	f	class:loop
getMemAccessSize	instruction.cpp	/^int instruction::getMemAccessSize() { \/\/in bytes$/;"	f	class:instruction
getMy_BB_id	instruction.cpp	/^ADDR instruction::getMy_BB_id () {$/;"	f	class:instruction
getMy_PB_id	instruction.cpp	/^set<ADDR> instruction::getMy_PB_id () {$/;"	f	class:instruction
getMy_first_PB_id	instruction.cpp	/^ADDR instruction::getMy_first_PB_id() {$/;"	f	class:instruction
getNeighborSize	interfNode.cpp	/^int interfNode::getNeighborSize() {$/;"	f	class:interfNode
getNthAncestor	basicblock.cpp	/^basicblock* basicblock::getNthAncestor(int indx) {$/;"	f	class:basicblock
getNthArchReg	instruction.cpp	/^long int instruction::getNthArchReg(int indx) {$/;"	f	class:instruction
getNthAssignedBB	variable.cpp	/^basicblock* variable::getNthAssignedBB(int indx) {$/;"	f	class:variable
getNthBB	loop.cpp	/^basicblock* loop::getNthBB(int indx) {$/;"	f	class:loop
getNthBackEdgeSource	basicblock.cpp	/^basicblock* basicblock::getNthBackEdgeSource(int i) {$/;"	f	class:basicblock
getNthDescendent	basicblock.cpp	/^basicblock* basicblock::getNthDescendent(int indx) {$/;"	f	class:basicblock
getNthOldWriteReg	instruction.cpp	/^long int instruction::getNthOldWriteReg(int i) {$/;"	f	class:instruction
getNthReadReg	instruction.cpp	/^long int instruction::getNthReadReg(int i) { $/;"	f	class:instruction
getNthReg	instruction.cpp	/^long int instruction::getNthReg(int i) { $/;"	f	class:instruction
getNthRegType	instruction.cpp	/^int instruction::getNthRegType(int i) { $/;"	f	class:instruction
getNthWriteReg	instruction.cpp	/^long int instruction::getNthWriteReg(int i) { $/;"	f	class:instruction
getNumAncestors	basicblock.cpp	/^int basicblock::getNumAncestors() {$/;"	f	class:basicblock
getNumAncestors	instruction.cpp	/^int instruction::getNumAncestors() {$/;"	f	class:instruction
getNumAssignedBB	variable.cpp	/^int variable::getNumAssignedBB() {$/;"	f	class:variable
getNumBB	loop.cpp	/^int loop::getNumBB() {$/;"	f	class:loop
getNumBackEdgeSource	basicblock.cpp	/^int basicblock::getNumBackEdgeSource() {$/;"	f	class:basicblock
getNumDependents	instruction.cpp	/^int instruction::getNumDependents() {$/;"	f	class:instruction
getNumDescendents	basicblock.cpp	/^int basicblock::getNumDescendents() {$/;"	f	class:basicblock
getNumReadReg	instruction.cpp	/^int instruction::getNumReadReg() {$/;"	f	class:instruction
getNumReg	instruction.cpp	/^int instruction::getNumReg() {$/;"	f	class:instruction
getNumWriteReg	instruction.cpp	/^int instruction::getNumWriteReg() {$/;"	f	class:instruction
getNumberOfRegs	regFile.cpp	/^long int regFile::getNumberOfRegs() {$/;"	f	class:regFile
getNxtBB	basicblock.cpp	/^basicblock* basicblock::getNxtBB() {$/;"	f	class:basicblock
getOpCode	instruction.cpp	/^const char *instruction::getOpCode() {return _opCode;}$/;"	f	class:instruction
getPhiFuncs	basicblock.cpp	/^map<long int, vector<long int> > basicblock::getPhiFuncs() {$/;"	f	class:basicblock
getPsudoReg	interfNode.cpp	/^long int interfNode::getPsudoReg() {$/;"	f	class:interfNode
getReadRegSubscript	instruction.cpp	/^long int instruction::getReadRegSubscript(long int var) { $/;"	f	class:instruction
getReg	interfNode.cpp	/^long int interfNode::getReg() {$/;"	f	class:interfNode
getRegAncestors	instruction.cpp	/^List<instruction*>* instruction::getRegAncestors() {$/;"	f	class:instruction
getRegNum	regFile.cpp	/^long int regFile::getRegNum(const char* regName) {$/;"	f	class:regFile
getRegisterStr	instruction.cpp	/^std::string instruction::getRegisterStr() {$/;"	f	class:instruction
getRenamedReg	instruction.cpp	/^long int instruction::getRenamedReg(long int reg) {$/;"	f	class:instruction
getRenamedReg	registerRename.cpp	/^long int getRenamedReg(long int reg) {$/;"	f
getSDominatorSize	basicblock.cpp	/^int basicblock::getSDominatorSize() {$/;"	f	class:basicblock
getTakenBias	basicblock.cpp	/^float basicblock::getTakenBias() {$/;"	f	class:basicblock
getTakenTarget	basicblock.cpp	/^basicblock* basicblock::getTakenTarget() {$/;"	f	class:basicblock
getTopStack	variable.cpp	/^int variable::getTopStack() {$/;"	f	class:variable
getType	instruction.cpp	/^const char instruction::getType() {$/;"	f	class:instruction
getWriteRegSubscript	instruction.cpp	/^long int instruction::getWriteRegSubscript(long int var) { $/;"	f	class:instruction
init	dot.cpp	/^void dot::init() {$/;"	f	class:dot
insertMOVop	basicblock.cpp	/^void basicblock::insertMOVop(long int dst_var, long int dst_subs, long int src_var, long int src_subs) {$/;"	f	class:basicblock
insertPhiFunc	basicblock.cpp	/^void basicblock::insertPhiFunc(long int var) {$/;"	f	class:basicblock
instruction	instruction.cpp	/^instruction::instruction() {$/;"	f	class:instruction
instruction	instruction.h	/^class instruction {$/;"	c
interfNode	interfNode.cpp	/^interfNode::interfNode(long int psudoReg) {$/;"	f	class:interfNode
interfNode	interfNode.h	/^class interfNode {$/;"	c
isAPhraseblock	basicblock.cpp	/^bool basicblock::isAPhraseblock() {$/;"	f	class:basicblock
isASDominator	basicblock.cpp	/^bool basicblock::isASDominator(ADDR nodeID) {$/;"	f	class:basicblock
isAlreadyAssignedArcRegs	instruction.cpp	/^bool instruction::isAlreadyAssignedArcRegs() {$/;"	f	class:instruction
isBackEdge	basicblock.cpp	/^bool basicblock::isBackEdge() {$/;"	f	class:basicblock
isBbFallThrough	loop.cpp	/^bool loop::isBbFallThrough(ADDR bbID) {$/;"	f	class:loop
isBbInLoop	loop.cpp	/^bool loop::isBbInLoop(ADDR bbID) {$/;"	f	class:loop
isEntryPoint	basicblock.cpp	/^bool basicblock::isEntryPoint() {$/;"	f	class:basicblock
isInIDom	basicblock.cpp	/^bool basicblock::isInIDom(ADDR nodeID) {$/;"	f	class:basicblock
isInLocalRegSet	basicblock.cpp	/^bool basicblock::isInLocalRegSet(long int reg) {$/;"	f	class:basicblock
isInnerLoop	loop.cpp	/^bool loop::isInnerLoop(loop* lp) {$/;"	f	class:loop
isInsAddrInBB	basicblock.cpp	/^bool basicblock::isInsAddrInBB(ADDR insAddr) {$/;"	f	class:basicblock
isInsRepeated	instruction.cpp	/^bool instruction::isInsRepeated(instruction* ins, List<instruction*>*_ancestors) {$/;"	f	class:instruction
isLongestPathSet	instruction.cpp	/^bool instruction::isLongestPathSet() {$/;"	f	class:instruction
isNotRepeated	annotateTrace.cpp	/^bool isNotRepeated(ADDR insAddr, List<instruction*>* insList) {$/;"	f
isRdMemType	instruction.cpp	/^bool instruction::isRdMemType() {$/;"	f	class:instruction
isVisited	basicblock.cpp	/^bool basicblock::isVisited() {$/;"	f	class:basicblock
isWrMemType	instruction.cpp	/^bool instruction::isWrMemType() {$/;"	f	class:instruction
itos	regFile.cpp	/^string regFile::itos(long int number) {$/;"	f	class:regFile
listSchedule	listSchedule.cpp	/^void listSchedule(basicblock* bb) {$/;"	f
listSchedule_phraseblock	make_phraseblock.cpp	/^void listSchedule_phraseblock(List<basicblock*> *pbList) {$/;"	f
livenessAnalysis	registerAllocate.cpp	/^void livenessAnalysis(List<basicblock*> *bbList) {$/;"	f
loop	loop.cpp	/^loop::loop(ADDR loopEntryID, ADDR loopExitID) : basicblock() {$/;"	f	class:loop
loop	loop.h	/^class loop : public basicblock {$/;"	c
loopToPhraseblock	phraseblock.cpp	/^void phraseblock::loopToPhraseblock(loop *lp) {$/;"	f	class:phraseblock
main	main.cpp	/^int main(int argc, char* argv[])$/;"	f
makeLoopNests	make_phraseblock.cpp	/^void makeLoopNests(List<loop*> *loopList, set<ADDR> &loopHeaders) {$/;"	f
makeNaturalLoops	make_phraseblock.cpp	/^void makeNaturalLoops(List<basicblock*>* bbList, List<loop*>* loopList, set<ADDR> &loopHeaders) {$/;"	f
makeUniqueRegs	instruction.cpp	/^void instruction::makeUniqueRegs() {$/;"	f	class:instruction
make_basicblock	make_basicblock.cpp	/^void make_basicblock (List<instruction*> *insList,$/;"	f
make_interference_nodes_network	registerAllocate.cpp	/^void make_interference_nodes_network(basicblock* bb, map<long int,interfNode*> &globalIntfNodeMap, map<long int,interfNode*> &locallIntfNodeMap, map<long int,interfNode*> &allIntfNodeMap) {$/;"	f
make_phraseblock	make_phraseblock.cpp	/^List<basicblock*>* make_phraseblock(List<basicblock*>* bbList,$/;"	f
markAsEntryPoint	basicblock.cpp	/^void basicblock::markAsEntryPoint() {$/;"	f	class:basicblock
memReadList	dependencyTable.h	/^		std::map<ADDR,instruction*> memReadList;$/;"	m	class:dependencyTable
memType	global.h	/^typedef enum {none, READ, WRITE} memType;$/;"	t	typeref:enum:__anon2
memWriteList	dependencyTable.h	/^		std::map<ADDR,instruction*> memWriteList;$/;"	m	class:dependencyTable
memWrites	dependencyTable.h	/^		List<instruction*>* memWrites;$/;"	m	class:dependencyTable
mk_phrase	make_phraseblock.cpp	/^void mk_phrase(List<basicblock*>* newBbList) {$/;"	f
mk_phraseblock	make_phraseblock.cpp	/^void mk_phraseblock(List<phraseblock*>* pbList, List<loop*> *loopList, set<ADDR> &loopHeaders, List<basicblock*>* newBbList) {$/;"	f
nextRenReg	instruction.cpp	/^long int nextRenReg = INIT_RENAME_REG_NUM;$/;"	v
nextRenReg	registerRename.cpp	/^long int nextRenReg = INIT_RENAME_REG_NUM;$/;"	v
noType	global.h	/^typedef enum {noType, ALU, MEM, FPU, BR} type;$/;"	e	enum:__anon3
none	global.h	/^typedef enum {none, READ, WRITE} memType;$/;"	e	enum:__anon2
numNonBackEdgeAncestors	basicblock.cpp	/^int basicblock::numNonBackEdgeAncestors() {$/;"	f	class:basicblock
numRegs	regFile.h	/^		long int numRegs;$/;"	m	class:regFile
operator =	basicblock.cpp	/^basicblock& basicblock::operator= (const basicblock& bb) { \/\/TODO: UPDATE THIS FUNCTION$/;"	f	class:basicblock
parseRegisters	make_instruction.cpp	/^void parseRegisters(instruction* newIns, FILE* input_assembly) {$/;"	f
parse_config_file	config.cpp	/^void parse_config_file() {$/;"	f
parse_instruction	make_instruction.cpp	/^void parse_instruction(List<instruction*> *insList, $/;"	f
partitionLongestPath	quickSort.cpp	/^int partitionLongestPath(List<instruction*> *list, int left, int right) {$/;"	f
path_visit_set	dfs.cpp	/^set<ADDR> path_visit_set;$/;"	v
phSize	phrase.cpp	/^int phrase::phSize() {$/;"	f	class:phrase
phi_func_placement	ssa.cpp	/^void phi_func_placement(List<basicblock*> *bbList, map<int,variable*> &varList) {$/;"	f
phrase	phrase.cpp	/^phrase::phrase() {$/;"	f	class:phrase
phrase	phrase.h	/^class phrase {$/;"	c
phraseblock	phraseblock.cpp	/^phraseblock::phraseblock() : basicblock() {$/;"	f	class:phraseblock
phraseblock	phraseblock.h	/^class phraseblock : public basicblock {$/;"	c
popFromStack	variable.cpp	/^void variable::popFromStack() {$/;"	f	class:variable
popHackPushes	variable.cpp	/^void variable::popHackPushes() {$/;"	f	class:variable
printBb	basicblock.cpp	/^void basicblock::printBb() {$/;"	f	class:basicblock
pushToStack	variable.cpp	/^void variable::pushToStack(int s) {$/;"	f	class:variable
quicksortLongestPath	quickSort.cpp	/^void quicksortLongestPath(List<instruction*> *list, int left, int right)$/;"	f
readRegRenMap	instruction.h	/^	    map<long int,long int> readRegRenMap;$/;"	m	class:instruction
readRegRenMap	registerRename.cpp	/^map<long int,long int> readRegRenMap;$/;"	v
regFile	regFile.cpp	/^regFile::regFile()$/;"	f	class:regFile
regFile	regFile.h	/^class regFile {$/;"	c
regKind	global.h	/^typedef enum {LRF, GRF} regKind;$/;"	t	typeref:enum:__anon4
regLookup	dependencyTable.cpp	/^instruction* dependencyTable::regLookup (long int reg, tableType table) {$/;"	f	class:dependencyTable
regReadList	dependencyTable.h	/^		std::map<ADDR,instruction*> regReadList;$/;"	m	class:dependencyTable
regWriteList	dependencyTable.h	/^		std::map<ADDR,instruction*> regWriteList;$/;"	m	class:dependencyTable
removeAneighbor	interfNode.cpp	/^void interfNode::removeAneighbor(interfNode* node) {$/;"	f	class:interfNode
removeBB	annotateTrace.cpp	/^void removeBB(ADDR bbHead, List<map<ADDR,string> > *dynBBList) {$/;"	f
removeFromGraph	interfNode.cpp	/^void interfNode::removeFromGraph() {$/;"	f	class:interfNode
removeNthRegister	instruction.cpp	/^void instruction::removeNthRegister(int i) { $/;"	f	class:instruction
renameAllInsRegs	basicblock.cpp	/^void basicblock::renameAllInsRegs() {$/;"	f	class:basicblock
renameAndbuildDefUseSets	registerAllocate.cpp	/^void renameAndbuildDefUseSets(List<basicblock*> *bbList) {$/;"	f
renameReadReg	instruction.cpp	/^void instruction::renameReadReg(int indx, long int renReg) {$/;"	f	class:instruction
renameReadReg	registerRename.cpp	/^void renameReadReg(int indx, long int renReg) {$/;"	f
renameWriteReg	instruction.cpp	/^void instruction::renameWriteReg(int indx, long int reg) {$/;"	f	class:instruction
renameWriteReg	registerRename.cpp	/^long int renameWriteReg(long int reg) {$/;"	f
replaceNthPhiOperand	basicblock.cpp	/^void basicblock::replaceNthPhiOperand(long int var, int indx, long int subscript) {$/;"	f	class:basicblock
replicateBBList	make_phraseblock.cpp	/^void replicateBBList(List<basicblock*>* bbList, List<basicblock*>* newBbList) {$/;"	f
reschedule	dependencyTable.cpp	/^bool reschedule;$/;"	v
resetLongestPath	instruction.cpp	/^void instruction::resetLongestPath() {$/;"	f	class:instruction
resetVisitBits	loop.cpp	/^void loop::resetVisitBits() {$/;"	f	class:loop
resetVisitBits	make_phraseblock.cpp	/^void resetVisitBits(List<basicblock*> *bbList) {$/;"	f
runDot	dot.cpp	/^void dot::runDot(List<basicblock*>* list) {$/;"	f	class:dot
search	ssa.cpp	/^void search(basicblock* bb, map<int,variable*> &varList) {$/;"	f
setAllasDominators	basicblock.cpp	/^void basicblock::setAllasDominators(bool domSetIsAll) {$/;"	f	class:basicblock
setAncestor	basicblock.cpp	/^void basicblock::setAncestor(basicblock* bb) {$/;"	f	class:basicblock
setArchReg	instruction.cpp	/^void instruction::setArchReg(long int r) {$/;"	f	class:instruction
setAsAncestor	instruction.cpp	/^void instruction::setAsAncestor(instruction* ins) {$/;"	f	class:instruction
setAsBackEdgeSource	basicblock.cpp	/^void basicblock::setAsBackEdgeSource(basicblock* bb) {$/;"	f	class:basicblock
setAsDependent	instruction.cpp	/^void instruction::setAsDependent(instruction* ins) {$/;"	f	class:instruction
setAsRegAncestor	instruction.cpp	/^void instruction::setAsRegAncestor(instruction* ins) {$/;"	f	class:instruction
setAsUnvisited	basicblock.cpp	/^void basicblock::setAsUnvisited() {$/;"	f	class:basicblock
setAsVisited	basicblock.cpp	/^void basicblock::setAsVisited() {$/;"	f	class:basicblock
setBPaccuracy	instruction.cpp	/^void instruction::setBPaccuracy(double bpAccuracy) {$/;"	f	class:instruction
setBrDst	instruction.cpp	/^void instruction::setBrDst(ADDR brDst) {$/;"	f	class:instruction
setBrTakenBias	instruction.cpp	/^void instruction::setBrTakenBias(double brBias) {$/;"	f	class:instruction
setC	variable.cpp	/^void variable::setC(int c) {$/;"	f	class:variable
setDescendent	basicblock.cpp	/^void basicblock::setDescendent(basicblock* bb) {$/;"	f	class:basicblock
setDominators	basicblock.cpp	/^bool basicblock::setDominators() {$/;"	f	class:basicblock
setDominators	basicblock.cpp	/^bool basicblock::setDominators(List<basicblock*>* bbList) {$/;"	f	class:basicblock
setDominators	basicblock.cpp	/^bool basicblock::setDominators(map<ADDR,basicblock*> &intersection) {$/;"	f	class:basicblock
setFallThrough	basicblock.cpp	/^void basicblock::setFallThrough(basicblock* bb) {$/;"	f	class:basicblock
setInsAddr	instruction.cpp	/^void instruction::setInsAddr(ADDR insAddr) {$/;"	f	class:instruction
setInsAsm	instruction.cpp	/^void instruction::setInsAsm(const char *command) {strcpy(_command, command);}$/;"	f	class:instruction
setLdMissRate	instruction.cpp	/^void instruction::setLdMissRate(double missRate) {$/;"	f	class:instruction
setListIndx	basicblock.cpp	/^void basicblock::setListIndx(int listIndx) {$/;"	f	class:basicblock
setLongestPath	instruction.cpp	/^void instruction::setLongestPath(int longestPath) {$/;"	f	class:instruction
setMemAccessSize	instruction.cpp	/^void instruction::setMemAccessSize(int memSize) { \/\/in bytes$/;"	f	class:instruction
setMy_BBorPB_id	instruction.cpp	/^void instruction::setMy_BBorPB_id (ADDR id) {$/;"	f	class:instruction
setOpCode	instruction.cpp	/^void instruction::setOpCode(const char *opCode) {strcpy(_opCode, opCode);}$/;"	f	class:instruction
setOuterLoop	loop.cpp	/^void loop::setOuterLoop(loop* lp) {$/;"	f	class:loop
setPhiWriteVar	basicblock.cpp	/^void basicblock::setPhiWriteVar(long int var, long int subscript) {$/;"	f	class:basicblock
setRdAddrSet	instruction.cpp	/^void instruction::setRdAddrSet(set<ADDR> &addrSet) {$/;"	f	class:instruction
setRdMemType	instruction.cpp	/^void instruction::setRdMemType() {$/;"	f	class:instruction
setReadVar	instruction.cpp	/^void instruction::setReadVar(int var, int subscript) {$/;"	f	class:instruction
setRegister	instruction.cpp	/^void instruction::setRegister (long int *r, int *rt) {$/;"	f	class:instruction
setTakenTarget	basicblock.cpp	/^void basicblock::setTakenTarget(basicblock* bb) {$/;"	f	class:basicblock
setType	instruction.cpp	/^void instruction::setType(const char insType) {$/;"	f	class:instruction
setWrAddrSet	instruction.cpp	/^void instruction::setWrAddrSet(set<ADDR> &addrSet) {$/;"	f	class:instruction
setWrMemType	instruction.cpp	/^void instruction::setWrMemType() {$/;"	f	class:instruction
setWriteVar	instruction.cpp	/^void instruction::setWriteVar(int var, int subscript) {$/;"	f	class:instruction
set_arch_reg_for_all_ins	registerAllocate.cpp	/^void set_arch_reg_for_all_ins(basicblock* bb, map<long int,interfNode*> &globalIntfNodeMap) {$/;"	f
setupBackEdge	basicblock.cpp	/^void basicblock::setupBackEdge() {$/;"	f	class:basicblock
setupBox	dot.cpp	/^void dot::setupBox(string color) {$/;"	f	class:dot
setupDefUseSets	basicblock.cpp	/^void basicblock::setupDefUseSets() {$/;"	f	class:basicblock
setupRegFile	regFile.cpp	/^void regFile::setupRegFile () {$/;"	f	class:regFile
setup_dominance_frontier	dominator.cpp	/^void setup_dominance_frontier(List<basicblock*>* bbList) {$/;"	f
ssa_renaming	ssa.cpp	/^void ssa_renaming(List<basicblock*> *bbList, map<int,variable*> &varList) {$/;"	f
storeToFile	annotateTrace.cpp	/^long int storeToFile(bool brFound, ADDR brAddr, basicblock* bb, map<ADDR, string> &dynBBMap, FILE* traceFileOutput) {$/;"	f
storeToFile	annotateTrace.cpp	/^void storeToFile(map<ADDR,bool> &brFoundMap, map<ADDR,ADDR> &brAddrMap, basicblock* bb, map<ADDR, map<ADDR,string> > &dynBBListMap, FILE* traceFileOutput) {$/;"	f
swap	quickSort.cpp	/^void swap(List<instruction*> *list, int x, int y) {$/;"	f
tableType	dependencyTable.h	/^typedef enum {MEM_READ, MEM_WRITE, REG_WRITE, REG_READ} tableType;$/;"	t	typeref:enum:__anon1
transferPointersToNewList	basicblock.cpp	/^void basicblock::transferPointersToNewList(List<basicblock*>* bbList) {$/;"	f	class:basicblock
type	global.h	/^typedef enum {noType, ALU, MEM, FPU, BR} type;$/;"	t	typeref:enum:__anon3
updateDefSet	basicblock.cpp	/^void basicblock::updateDefSet(long int reg) {$/;"	f	class:basicblock
updateLocalRegSet	basicblock.cpp	/^void basicblock::updateLocalRegSet() {$/;"	f	class:basicblock
updateUseSet	basicblock.cpp	/^void basicblock::updateUseSet(long int reg) {$/;"	f	class:basicblock
update_InOutSet	basicblock.cpp	/^bool basicblock::update_InOutSet() {$/;"	f	class:basicblock
variable	variable.cpp	/^variable::variable (long int var) {$/;"	f	class:variable
variable	variable.h	/^class variable {$/;"	c
whichPred	ssa.cpp	/^int whichPred(basicblock* Y, basicblock* X) {$/;"	f
wrLookup	dependencyTable.cpp	/^List<instruction*>* dependencyTable::wrLookup () {$/;"	f	class:dependencyTable
writeRegRenMap	instruction.h	/^		map<long int,long int> writeRegRenMap;$/;"	m	class:instruction
writeRegRenMap	registerRename.cpp	/^map<long int,long int> writeRegRenMap;$/;"	v
writeToFile	logGen.cpp	/^void writeToFile (List<basicblock*> *bbList, string *program_name) {$/;"	f
~basicblock	basicblock.cpp	/^basicblock::~basicblock() {$/;"	f	class:basicblock
~dependencyTable	dependencyTable.cpp	/^dependencyTable::~dependencyTable() {$/;"	f	class:dependencyTable
~dot	dot.cpp	/^dot::~dot() {$/;"	f	class:dot
~instruction	instruction.cpp	/^instruction::~instruction() {$/;"	f	class:instruction
~interfNode	interfNode.cpp	/^interfNode::~interfNode() {$/;"	f	class:interfNode
~loop	loop.cpp	/^loop::~loop() {$/;"	f	class:loop
~phrase	phrase.cpp	/^phrase::~phrase() {$/;"	f	class:phrase
~phraseblock	phraseblock.cpp	/^phraseblock::~phraseblock() {$/;"	f	class:phraseblock
~regFile	regFile.h	/^		~regFile(){}$/;"	f	class:regFile
~variable	variable.cpp	/^variable::~variable() {$/;"	f	class:variable
